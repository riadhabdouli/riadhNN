<?php

namespace App\Controller;
use App\Entity\Evenement;
use App\Form\EvenementType;
use App\Form\NoteType;
use App\Repository\EvenementRepository;
use Doctrine\ORM\Query\Expr;
use phpDocumentor\Reflection\Type;
use Symfony\Bridge\Doctrine\Form\Type\EntityType;
use Symfony\Bundle\FrameworkBundle\Controller\AbstractController;
use Symfony\Component\HttpFoundation\Response;
use Symfony\Component\Form\Extension\Core\Type\SubmitType;
use Symfony\Component\HttpFoundation\Request;
use Ob\HighchartsBundle\Highcharts\Highchart;
use Symfony\Component\HttpFoundation\File\Fil;
use Symfony\Component\Routing\Annotation\Route;
class EvenementController extends AbstractController
{
    /**
     * @Route("/evenement", name="evenement")
     */
    public function index(): Response
    {
        return $this->render('evenement/index.html.twig', [
            'controller_name' => 'EvenementController',
        ]);
    }

    /**
     * @route("/evenementlist", name="evenementlist")
     */
    public function afficherevenement(){

        $r=$this->getDoctrine()->getRepository(evenement::class);
        $evenement=$r->findAll();
        return $this->render('evenement/affiche.html.twig' ,[ 'evenement' =>$evenement]);
    }


    /**
     * @param Request $request
     * @return \Symfony\Component\HttpFoundation\Response
     * @route ("/addevenement",name="addevenement")
     */

    public  function Add(Request $request)
    {
        $evenement = new evenement();
        $form = $this->createForm(EvenementType::class, $evenement);
        $form->add('Ajouter', SubmitType::class);
        $form->handleRequest($request);

        if ($form->isSubmitted() && $form->isValid()) {

                $file = $evenement->getImage();

                $fileName = $this->generateUniqueFileName() . '.' . $file->guessExtension();


                $file->move($this->getParameter('brochures_directory'), $fileName);


                $evenement->setImage($fileName);
            $em = $this->getDoctrine()->getManager();
            $em->persist($evenement);
            $em->flush();
            return $this->redirectToRoute('evenementlist');
        }
        return $this->render('evenement/ajout.html.twig', ['form' => $form->createView()]);
    }
    /**
     * @return string
     */
    private function generateUniqueFileName()
    {
        // md5() reduces the similarity of the file names generated by
        // uniqid(), which is based on timestamps
        return md5(uniqid());
    }

    /**
     * @param $id
     * @return \Symfony\Component\HttpFoundation\RedirectResponse
     * @route("supprimerevenement{id}", name="supprimerevenement")
     */
    public function supprimerevenement($id){
        $em =$this->getDoctrine()->getManager();
        $evenement =$em->getRepository(Evenement::class)->find($id);
        $em->remove($evenement);
        $em->flush();
        return $this->redirectToRoute("evenementlist");
    }

    /**
     * @route("modifierevenement{id}",name="modifierevenement")
     */

    function Update(EvenementRepository $repository,$id,Request $request){
        $evenement=$repository->find($id);
        $evenement->setImage(null);
        $form =$this->createForm(EvenementType::class,$evenement);
        $form->add('Modifier',SubmitType::class);
        $form->handleRequest($request);

        if($form->isSubmitted() && $form->isValid()){
            $file = $evenement->getImage();

            $fileName = $this->generateUniqueFileName() . '.' . $file->guessExtension();


            $file->move($this->getParameter('brochures_directory'), $fileName);


            $evenement->setImage($fileName);
            $em=$this->getDoctrine()->getManager();

            $em->flush();
            return $this->redirectToRoute('evenementlist');
        }
        return $this->render('evenement/modifier.html.twig',['f'=>$form->createView()]);


    }

    /**
     * @Route("recherche",name="recherche")
     */
   function recherche (EvenementRepository $repository,Request $request){
$data=$request->get('search');

//$evenement=$repository->findBy(['id'=>$data]);
       //$evenement=$repository->findBy(['nom'=>$data]);
       if ((empty($evenement=$repository->findBy(['nom'=>$data])))&&(empty($evenement=$repository->findBy(['organisateur'=>$data])))&&(empty($evenement=$repository->findBy(['lieu'=>$data])))) {
           $evenement=$repository->findBy(
               ['id'=>$data ]
               );
       }
return $this->render('evenement/affiche.html.twig' ,[ 'evenement' =>$evenement]);


   }

    /**
     * @param $id
     * @param EvenementRepository $repository
     * @return Response
     * @Route ("/Affichedetails/{id}", name="details")
     */
    public function Affichedetails($id, EvenementRepository $repository)
    {
        $event = $repository->find($id);
        return $this->render('evenement/deatails.html.twig', [
            'p' => $event
        ]);
    }

    /**
     * @Route("note{id}",name="note")
     */
    function note (EvenementRepository $repository,$id,Request $request){
        $evenement=$repository->find($id);
        $evenement->setImage(null);
        $form =$this->createForm(NoteType::class,$evenement);
        $form->add('noter',SubmitType::class);
        $form->handleRequest($request);

        if($form->isSubmitted() && $form->isValid()){

            $evenement->setTotalnote($evenement->getTotalnote() + $evenement->getAttribution());
            $evenement->setCompteur($evenement->getCompteur() + 1);
            $evenement->setNote($evenement->getTotalnote() / $evenement->getCompteur());

            $em=$this->getDoctrine()->getManager();

            $em->flush();
            return $this->redirectToRoute('personne');
        }
        return $this->render('evenement/note.html.twig',['f'=>$form->createView()]);

    }


    /**
     * @Route("hist",name="hist")
     */
    public function chartHistogrammeAction()
    {
        $em = $this->getDoctrine()->getManager();
        $classes = new Evenement();
        $animal = $em->getRepository(Evenement::class)->findAll();
        $classes->setNom('Evenement');
        $j = 0;
        $f = 0;
        $m = 0;
        $a = 0;
        $ma = 0;
        $ju = 0;
        $juillet = 0;
        $aout = 0;
        $sept = 0;
        $oct = 0;
        $nov = 0;
        $dec = 0;
        foreach ($animal as $animals) {
            $moi = $animals->getDate();
            $mois=$moi->format('m');
            switch ($mois) {
                case 1 :
                    $j++;
                    break;
                case 2:
                    $f++;
                    break;
                case 3:
                    $m++;
                    break;
                case 4:
                    $a++;
                    break;
                case 5:
                    $ma++;
                    break;
                case 6:
                    $ju++;
                    break;
                case 7:
                    $juillet++;
                    break;
                case 8:
                    $aout++;
                    break;
                case 9:
                    $sept++;
                    break;
                case 10:
                    $oct++;
                    break;
                case 11:
                    $nov++;
                    break;
                case 12:
                    $dec++;
                    break;

            }
        }
        $aj = array();
        $af = array();
        $am = array();
        $aa = array();
        $ama = array();
        $aju = array();
        $ajuillet = array();
        $aaout = array();
        $asept = array();
        $aoct = array();
        $anov = array();
        $adec = array();


        array_push($aj, $j);
        array_push($af, $f);
        array_push($am, $m);
        array_push($aa, $a);
        array_push($ama, $m);
        array_push($aju, $ju);
        array_push($ajuillet, $juillet);
        array_push($aaout, $aout);
        array_push($asept, $sept);
        array_push($aoct, $oct);
        array_push($anov, $nov);
        array_push($adec, $dec);
        $series = array(

            array('name' => 'Janvier',
                'type' => 'column',
                'color' => '#4572A7',
                'yAxis' => 0,
                'data' => $aj,
            )
        ,
            array('name' => 'Fevrier',
                'type' => 'column',
                'color' => '#4572A7',
                'yAxis' => 0,
                'data' => $af,
            )
        ,
            array('name' => 'Mars',
                'type' => 'column',
                'color' => '#4572A7',
                'yAxis' => 0,
                'data' => $am,
            )
        , array('name' => 'Avril',
                'type' => 'column',
                'color' => '#4572A7',
                'yAxis' => 0,
                'data' => $aa,
            )
        , array('name' => 'Mai',
                'type' => 'column',
                'color' => '#4572A7',
                'yAxis' => 0,
                'data' => $ama,
            )
        , array('name' => 'Juin',
                'type' => 'column',
                'color' => '#4572A7',
                'yAxis' => 0,
                'data' => $aju,
            )
        , array('name' => 'Juillet',
                'type' => 'column',
                'color' => '#4572A7',
                'yAxis' => 0,
                'data' => $ajuillet,
            )
        , array('name' => 'Aout',
                'type' => 'column',
                'color' => '#4572A7',
                'yAxis' => 0,
                'data' => $aaout,
            )
        , array('name' => 'Septembre',
                'type' => 'column',
                'color' => '#4572A7',
                'yAxis' => 0,
                'data' => $asept,
            )
        , array('name' => 'Octobre',
                'type' => 'column',
                'color' => '#4572A7',
                'yAxis' => 0,
                'data' => $aoct,
            )
        , array('name' => 'Novembre',
                'type' => 'column',
                'color' => '#4572A7',
                'yAxis' => 0,
                'data' => $anov,
            )
        , array('name' => 'Decembre',
                'type' => 'column',
                'color' => '#4572A7',
                'yAxis' => 0,
                'data' => $adec,
            )

        );
        $yData = array(array(

            'labels' => array(

                'formatter' => new Expr('function() { return this.value + "" }'),
                'style' => array(
                    'color' => '#4572A7')
            ),
            'gridLineWidth' => 0,
            'title' => array(
                'text' => 'Nombre des evenements',
                'style' => array('color' => '#4572A7')
            ),
        ),
        );

        $ob = new Highchart();
        $ob->chart->renderTo('container');
        $ob->chart->type('column');
        $ob->title->text('Statistique Evenement');
        $ob->xAxis->categories('dd');
        $ob->yAxis($yData);
        $ob->legend->enabled(false);
        $formatter = new Expr('function () {
                    var unit = {
                     "Janvier": "Janvier",
                     "Fevrier": "Fevrier",
                     "Mars": "Mars",
                     "Avril": "Avril",
                     "Mai": "Mai",
                     "Juin": "Juin",
                     "Juillet": "Juillet",
                     "Aout": "Aout",
                     "Septembre": "Septembre",
                     "Octobre": "Octobre",
                     "Novembre": "Novembre",
                     "Decembre": "Decembre",
                     
                 }[this.series.name];
                 return this.x + ": <b>" + this.y + "</b> " + unit;
             }');
        $ob->tooltip->formatter($formatter);
        $ob->series($series);
        return $this->render('evenement/statistique.html.twig', array('chart' => $ob));
    }


    /**
     * @route("top", name="top")
     */
    public function top(){
        $r=$this->getDoctrine()->getRepository(evenement::class);
        $evenement=$r->findAll();


        return $this->render('evenement/topevent.html.twig' ,[ 'evenement' =>$evenement]);
    }
    /**
     * @route("affichefront", name="affichefront")
     */
    public function affichefront(){
        $r=$this->getDoctrine()->getRepository(evenement::class);
        $evenement=$r->findAll();


        return $this->render('evenement/affichefront.html.twig' ,[ 'evenement' =>$evenement]);
    }






}
